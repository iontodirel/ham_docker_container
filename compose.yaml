# **************************************************************** #
# ham_docker_container - Containers for APRS and ham radio         #
# Version 0.1.0                                                    #
# https://github.com/iontodirel/ham_docker_container               #
# Copyright (c) 2023 Ion Todirel                                   #
# **************************************************************** #
services:
  # ------------------------------------------------------
  # direwolfm - Direwolf modem container
  # ------------------------------------------------------
  #
  # Exposes typically ports 8010 and 8020 to the host (this can be configured from .env)
  # Has a volume mounted to read the digirig_config.json or other files (this can be configured from .env)
  # A private network is created and exposed between the direwolf container
  # and the aprx container, so that aprx can use port 8020 (typically) 
  # to access the Direwolf TCN KISS TNC
  # This container is given access to the host via --privileged such
  # that we can access USB sound cards and USB serial ports
  #
  # You can create multiple simultanously running containers
  # based on the Direwolf container directory
  # ------------------------------------------------------
  direwolfm:
    env_file:
      - ".env"
    environment:
      - SERVICE_NAME=${MODEM0_SERVICE_NAME}
      - WS_SERVICE_NAME=${SVC_CONTROL_WS_SERVICE_NAME}
      - WS_PORT=${SVC_CONTROL_WS_REST_PORT}
    build:
      context: .
      dockerfile: ./direwolf/Dockerfile
    image: "direwolf"
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    ports:
      # exposing KISS and AGWP ports to the host
      - "${MODEM0_AGWP_PORT}:${MODEM0_PRIV_AGWP_PORT}"
      - "${MODEM0_KISS_PORT}:${MODEM0_PRIV_KISS_PORT}"
    volumes:
      # find_devices configuration, shared such that configuration
      # can be changed without rebuilding the container
      - ${MODEM0_FD_CONFIG_FILE_NAME}:${MODEM0_PRIV_FD_CONFIG_FILE_NAME}
      # share volume with host, for logging, so Direwolf logs can be read on the host
      - ${MODEM0_LOG_DIR}:${MODEM0_PRIV_LOG_DIR}
      # Direwolf configuration, shared such that configuration
      # can be changed (wiht automatic service restart) without rebuilding the container
      - ${MODEM0_DW_CONFIG_FILE_NAME}:${MODEM0_PRIV_DW_CONFIG_FILE_NAME}
    networks:
      - direwolfm_network
      - service_network
    privileged: true
    labels:
      - "autoheal=true"
      - "ham_docker_container_name=${MODEM0_SERVICE_NAME}"
    depends_on:
      - svc_control_ws
    healthcheck:
      test: ["CMD", "pwsh", "-ExecutionPolicy", "Bypass", "-File", "/healthcheck.ps1"]
      interval: "10s"  # the interval to to perform health check
      start_period: "60s" # how long it takes to start the container
      retries: 1 # how many times to retry until the container becomes unhealty
      timeout: "30s" # how long until the health check completes
    restart: always
  # ------------------------------------------------------
  # direwolfl - Direwolf modem loopback container
  # ------------------------------------------------------
  direwolfl:
    env_file:
      - ".env"
    environment:
      - SERVICE_NAME=${MODEM1_SERVICE_NAME}
      - WS_SERVICE_NAME=${SVC_CONTROL_WS_SERVICE_NAME}
      - WS_PORT=${SVC_CONTROL_WS_REST_PORT}
    build:
      context: .
      dockerfile: ./direwolf/Dockerfile
    image: "direwolf"
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    ports:
      # exposing KISS and AGWP ports to the host
      - "${MODEM1_AGWP_PORT}:${MODEM1_PRIV_AGWP_PORT}"
      - "${MODEM1_KISS_PORT}:${MODEM1_PRIV_KISS_PORT}"
    volumes:
      # find_devices configuration, shared such that configuration
      # can be changed without rebuilding the container
      - ${MODEM1_FD_CONFIG_FILE_NAME}:${MODEM1_PRIV_FD_CONFIG_FILE_NAME}
      # share volume with host, for logging, so Direwolf logs can be read on the host
      - ${MODEM1_LOG_DIR}:${MODEM1_PRIV_LOG_DIR}
      # Direwolf configuration, shared such that configuration
      # can be changed (wiht automatic service restart) without rebuilding the container
      - ${MODEM1_DW_CONFIG_FILE_NAME}:${MODEM1_PRIV_DW_CONFIG_FILE_NAME}
    networks:
      - service_network
    privileged: true
    labels:
      - "autoheal=true"
      - "ham_docker_container_name=${MODEM1_SERVICE_NAME}"
    depends_on:
      - svc_control_ws
    healthcheck:
      test: ["CMD", "pwsh", "-ExecutionPolicy", "Bypass", "-File", "/healthcheck.ps1"]
      interval: "10s"  # the interval to to perform health check
      start_period: "60s" # how long it takes to start the container
      retries: 1 # how many times to retry until the container becomes unhealty
      timeout: "30s" # how long until the health check completes
    restart: always
  # ------------------------------------------------------
  # aprx - repeater container
  # ------------------------------------------------------
  aprx:
    env_file:
      - ".env"
    environment:
     - SERVICE_NAME=${APRX_SERVICE_NAME}
    build:
      context: .
      dockerfile: ./aprx/Dockerfile
    image: "aprx"
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    volumes:
      # for access to the aprx.conf file
      - ${APRX_CONFIG_FILE}:${APRX_PRIV_CONFIG_FILE}
      # for logging being accessible on the host
      - ${APRX_LOG_DIR}:${APRX_PRIV_LOG_DIR}
    networks:
      - direwolfm_network
      - service_network
    depends_on:
      - direwolfm
      - svc_control_ws
    labels:
      - autoheal=true
      - ham_docker_container_name=${APRX_SERVICE_NAME}
    healthcheck:
      test: ["CMD", "pwsh", "-ExecutionPolicy", "Bypass", "-File", "/healthcheck.ps1"]
      interval: 10s # the interval to to perform health check
      start_period: 60s # how long it takes to start the aprx container
                        # health checks won't count until after this period expires
      retries: 1        # how many times to retry until the container becomes unhealty
      timeout: 30s      # how long until the health check completes
    restart: always
  # # ------------------------------------------------------
  # # gps - gpsd container
  # # ------------------------------------------------------
  # # exposes port 8888 (typically), can be changed with GPS_HOST_PORT from .env
  # # can use "cgps -s localhost:8888" on the host to check (apt-get install gpsd-clients)
  # #
  # # This container is given access to the host via --privileged such
  # # that we can access USB serial ports
  gps:
    env_file:
      - ".env"
    environment:
      - SERVICE_NAME=${GPS_SERVICE_NAME}
    build:
      context: .
      dockerfile: ./gps/Dockerfile
    image: "gps"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "10"
    ports:
      # exposes GPS service onto the host
      - "${GPS_GPSD_PORT}:${GPS_PRIV_GPSD_PORT}"
    volumes:
      # enables updating find_devices config without rebuilding the container
      - ${GPS_FD_CONFIG_FILE_NAME}:${GPS_PRIV_FD_CONFIG_FILE_NAME}
    networks: 
      - gps_network
      - service_network
    privileged: true
    labels:
      - "autoheal=true"
      - "ham_docker_container_name=${GPS_SERVICE_NAME}"
    healthcheck:
      test: ["CMD", "pwsh", "-ExecutionPolicy", "Bypass", "-File", "/healthcheck.ps1"]
      interval: "10s"  # the interval to to perform health check
      start_period: "30s" # how long it takes to start the container
      retries: 1 # how many times to retry until the container becomes unhealty
      timeout: "15s" # how long until the health check completes
    depends_on:
      - svc_control_ws
    restart: always
  # ------------------------------------------------------
  # db - database container
  # ------------------------------------------------------
  db:
    env_file:
      - ".env"
    environment:
      - MYSQL_DATABASE=${DB_MYSQL_DB_NAME}
      - MYSQL_ROOT_PASSWORD=${DB_MYSQL_PASSWORD}
      - MYSQL_PASSWORD=${DB_MYSQL_PASSWORD}
      - MYSQL_USER=${DB_MYSQL_USER}
    image: mysql
    labels:
      - autoheal=true
      - "ham_docker_container_name=${DB_MYSQL_SERVICE_NAME}"
    ports:
      - ${DB_MYSQL_PORT}:${DB_PRIV_MYSQL_PORT}
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 10s
      start_period: 60s
      retries: 5
      timeout: 20s
    networks: 
      - db_network
    restart: always
  # ------------------------------------------------------
  # svc_control_ws - status web service container
  # ------------------------------------------------------
  svc_control_ws:
    env_file: 
      - ".env"
    build:
      context: .
      dockerfile: ./webservice/Dockerfile
    image: "service_control_ws"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
    labels:
      - autoheal=true
      - "ham_docker_container_name=${SVC_CONTROL_WS_SERVICE_NAME}"
    ports:
      - ${SVC_CONTROL_WS_WS_PORT}:${SVC_CONTROL_WS_WS_PORT}
      - ${SVC_CONTROL_WS_REST_PORT}:${SVC_CONTROL_WS_REST_PORT}
    volumes:
      - ${SVC_CONTROL_WS_DOCKER_SOCKET}:${SVC_CONTROL_WS_DOCKER_SOCKET}
      - ./settings.json:${SVC_CONTROL_WS_PRIV_SETTINGS_FILE_NAME}
    healthcheck:
      test: ["CMD", "pwsh", "-ExecutionPolicy", "Bypass", "-File", "/healthcheck.ps1"]
      interval: 10s
      start_period: 30s
      retries: 1
      timeout: 10s
    networks: 
      - db_network
      - service_network
    depends_on:
      - db
    restart: always
    privileged: true
  # ------------------------------------------------------
  # webapp - web administration app
  # ------------------------------------------------------
  webapp:
    env_file: 
      - ".env"
    build:
      context: .
      dockerfile: ./webapp/Dockerfile
    image: "webapp"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
    labels:
      - autoheal=true
      - "ham_docker_container_name=${WEBAPP_SERVICE_NAME}"
    ports:
      - ${WEBAPP_PORT}:${WEBAPP_PORT}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${WEBAPP_PORT}"]
      interval: 30s
      start_period: 30s
      retries: 1
      timeout: 10s
    networks:
      - service_network
    depends_on:
      - svc_control_ws
    restart: always
  # ------------------------------------------------------
  # autoheal - docker health monitoring container
  # ------------------------------------------------------
  # automatically restarts containers that are in unhealthy state
  # container image from: https://hub.docker.com/r/willfarrell/autoheal
  autoheal:
    env_file:
      - .env
    image: willfarrell/autoheal:latest
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
    labels:
      - "ham_docker_container_name=${AUTOHEAL_SERVICE_NAME}"
    tty: true
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
networks:
  service_network:
    name: ws
    driver: bridge
  direwolfm_network:
    driver: bridge
  gps_network:
    driver: bridge
  db_network:
    driver: bridge
